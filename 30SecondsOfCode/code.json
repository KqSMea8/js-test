[
  {
    "id": "arg",
    "num": "1",
    "name": "arg任意的",
    "type": "adapter",
    "descEn": "Creates a function that accepts up to n arguments, ignoring any additional arguments.",
    "descCn": "创建一个函数，该函数接受最多n个参数，忽略任何附加参数。",
    "es6": "const ary = (fn, n) => (...args) => fn(...args.slice(0, n));",
    "es5": "var ary = function (fn, n) {return fn.apply(null, [].slice.call(arguments, 0, n))}}",
    "test": "const firstTwoMax = ary(Math.max, 2);[[2, 6, 'a'], [8, 4, 6], [10]].map(x => firstTwoMax(...x)); // [6, 8, 10]",
    "difficulty":"1"
  },
  {
    "id": "call",
    "num": "2",
    "name": "call呼叫",
    "type": "adapter",
    "descEn": "Given a key and a set of arguments, call them when given a context. Primarily useful in composition.",
    "descCn": "给定一个键和一组参数，在给定上下文时调用它们。主要用于合成。",
    "es6": "const call = (key, ...args) => context => context[key](...args);",
    "es5": "var call = function (key) {var args = [].slice.call(arguments, 1);return function (context) {return context[key].apply(context, args);}}",
    "test": "var map = call('map', x => 2 * x);map([1,2,3])//[2, 4, 6]",
    "difficulty":"1"
  },
  {
    "id": "collectInto",
    "num": "3",
    "name": "collectInto聚集进入",
    "type": "adapter",
    "descEn": "Changes a function that accepts an array into a variadic function.",
    "descCn": "变化一个函数，让一个可变函数的参数，变成数组传入",
    "es6": "const collectInto = fn => (...args) => fn(args);",
    "es5": "var collectInto = function (fn) {return function () {return fn([].slice.call(arguments))}}",
    "test": "const pall = collectInto(function (arr) {console.log(arr);});pall(1, 2, 3);//[1, 2, 3]",
    "difficulty":"1"
  },
  {
    "id": "flip",
    "num": "4",
    "name": "flip翻转参数",
    "type": "adapter",
    "descEn": "Flip takes a function as an argument, then makes the first argument the last.",
    "descCn": "翻转将函数的参数，使第一个参数成为最后一个参数。",
    "es6": "const flip = fn => (first, ...rest) => fn(...rest, first);",
    "es5": "var flip = function (fn) {return function () {var args = [].slice.call(arguments);var first = args[0];args.shift();args.push(first);return fn.apply(fn, args)}};",
    "test": "var f = flip(function(f,d){console.log(f,d)});f(1,2)",
    "difficulty":"1"
  },
  {
    "id": "over",
    "num": "5",
    "name": "over越过",
    "type": "adapter",
    "descEn": "Creates a function that invokes each provided function with the arguments it receives and returns the results.",
    "descCn": "创建一个函数，传入任意个函数，参数调用每个提供的函数并返回结果。",
    "es6": "const over = (...fns) => (...args) => fns.map(fn => fn.apply(null, args));",
    "es5": "var over  = function () {var fns = [].slice.call(arguments);return function () {var args = [].slice.call(arguments);return fns.map(function (fn) {return fn.apply(null, args);})}}",
    "test": "const minMax = over(Math.min, Math.max);minMax(1, 2, 3, 4, 5); // [1,5]",
    "difficulty":"1"
  },
  {
    "id": "overArgs",
    "num": "6",
    "name": "overArgs",
    "type": "adapter",
    "descEn": "Creates a function that invokes the provided function with its arguments transformed.",
    "descCn": "创建一个函数，该函数调用所提供的函数，并将其参数转换。",
    "es6": "const overArgs = (fn, transforms) => (...args) => fn(...args.map((val, i) => transforms[i](val)));",
    "es5": "var overArgs = function (fn, transforms) {return function () {var args = [].slice.call(arguments);return args.map(function (val, i) {return transforms[i](val)})}}",
    "test": "const square = n => n * n;const double = n => n * 2;const fn = overArgs((x, y) => [x, y], [square, double]);fn(9, 3); // [81, 6]",
    "difficulty":"2"
  },
  {
    "id": "pipeAsyncFunctions",
    "num": "7",
    "name": "pipeAsyncFunctions",
    "type": "adapter",
    "descEn": "Performs left-to-right function composition for asynchronous functions.",
    "descCn": "从左到右的管道去执行异步函数",
    "es6": "const pipeAsyncFunctions = (...fns) => arg => fns.reduce((p, f) => p.then(f), Promise.resolve(arg));",
    "es5": "",
    "test": "const sum = pipeAsyncFunctions(x => x + 1,x => new Promise(resolve => setTimeout(() => resolve(x + 2), 1000)),x => x + 3,async x => (await x) + 4);(async () => {console.log(await sum(5)); // 15 (after one second)})();",
    "difficulty":"3"
  },
  {
    "id": "pipeFunctions",
    "num": "8",
    "name": "pipeFunctions",
    "type": "adapter",
    "descEn": "Performs left-to-right function composition.",
    "descCn": "从左到右的管道去执行函数",
    "es6": "const pipeFunctions = (...fns) => fns.reduce((f, g) => (...args) => g(f(...args)));",
    "es5": "",
    "test": "const add5 = x => x + 5;const multiply = (x, y) => x * y;const multiplyAndAdd5 = pipeFunctions(multiply, add5);multiplyAndAdd5(5, 2); // 15",
    "difficulty":"3"
  },
  {
    "id": "promisify",
    "num": "9",
    "name": "promisify化",
    "descEn":"Converts an asynchronous function to return a promise.",
    "descCn":"转换异步函数返回一个promise。",
    "es6": "const promisify = func => (...args) =>new Promise((resolve, reject) =>func(...args, (err, result) => (err ? reject(err) : resolve(result))));",
    "es5": "var promisify = function promisify(func) {return function () {var args = [].slice.call(arguments);return new Promise(function (resolve, reject) {return func.apply(undefined, args.concat([function (err, result) {return err ? reject(err) : resolve(result);}]));});};};",
    "test": "const delay = promisify((d, cb) => setTimeout(cb, d));delay(2000).then(() => console.log('Hi!')); // // Promise resolves after 2s",
    "difficulty": "3"
  },
  {
    "id": "rearg",
    "num": "10",
    "name": "",
    "descEn":"Creates a function that invokes the provided function with its arguments arranged according to the specified indexes.",
    "descCn":"Creates a function that invokes the provided function with its arguments arranged according to the specified indexes.",
    "es6": "const rearg = (fn, indexes) => (...args) =>fn(...args.reduce((acc, val, i) => ((acc[indexes.indexOf(i)] = val), acc),Array.from({ length: indexes.length })));",
    "es5": "var rearg = function (fn, indexes) {return function () {var args = [].slice.call(arguments);var d = args.reduce(function (acc, val, i) {acc[indexes.indexOf(i)] = val;return acc;}, Array(3))return fn.apply(null, d}}",
    "test": "var rearged = rearg(function(a, b, c) {return [a, b, c];},[2, 0, 1]);rearged('b', 'c', 'a'); // ['a', 'b', 'c']",
    "difficulty":"2"
  },
  {
    "id": "bifurcate",
    "num": "11",
    "name": "分叉",
    "descEn":"Splits values into two groups. If an element in filter is truthy, the corresponding element in the collection belongs to the first group; otherwise, it belongs to the second group.",
    "descCn":"将值分成两组。如果在过滤器的元素是真相，集合中的对应元素属于第一集团；否则，它属于第二组。",
    "es6": "const rearg = (fn, indexes) => (...args) =>fn(...args.reduce((acc, val, i) => ((acc[indexes.indexOf(i)] = val), acc),Array.from({ length: indexes.length })));",
    "es5": "var rearg = function (fn, indexes) {return function () {var args = [].slice.call(arguments);var d = args.reduce(function (acc, val, i) {acc[indexes.indexOf(i)] = val;return acc;}, Array(3))return fn.apply(null, d}}",
    "test": "bifurcate(['beep', 'boop', 'foo', 'bar'], [true, true, false, true]); // [ ['beep', 'boop', 'bar'], ['foo'] ]",
    "difficulty": "2"
  },
  {
    "id": "chunk",
    "num": "12",
    "name": "分组",
    "descEn":"Chunks an array into smaller arrays of a specified size",
    "descCn":"将数组分割成特定大小的小数组。",
    "es6": "const chunk = (arr, size) = Array.from({ length: Math.ceil(arr.length / size) }, (v, i) =>arr.slice(i * size, i * size + size));",
    "es5": "",
    "test": "chunk([1, 2, 3, 4, 5], 2); // [[1,2],[3,4],[5]]",
    "difficulty":"2"
  },
  {
    "id": "partition",
    "num": "25",
    "name": "分隔",
    "descEn":"Groups the elements into two arrays, depending on the provided function's truthiness for each element.",
    "descCn":"将元素分组为两个数组，这取决于为每个元素提供的函数的truthiness。",
    "es6": "const partition = (arr, fn) =>arr.reduce((acc, val, i, arr) => {acc[fn(val, i, arr) ? 0 : 1].push(val);return acc;},[[], []]);",
    "es5": "",
    "test": "const users = [{ user: 'barney', age: 36, active: false }, { user: 'fred', age: 40, active: true }];partition(users, o => o.active);",
    "difficulty":"2"
  },
  {
    "id": "permutations",
    "num": "26",
    "name": "排列",
    "descEn":"Generates all permutations of an array's elements (contains duplicates).",
    "descCn":"生成数组元素的所有排列(包含重复项)。",
    "es6": "",
    "es5": "",
    "test": "permutations([1, 33, 5]); // [ [ 1, 33, 5 ], [ 1, 5, 33 ], [ 33, 1, 5 ], [ 33, 5, 1 ], [ 5, 1, 33 ], [ 5, 33, 1 ] ]",
    "difficulty":"4"
  },
  {
    "id": "pull",
    "num": "27",
    "name": "拉",
    "descEn":"Mutates the original array to filter out the values specified.",
    "descCn":"对原始数组进行修改，以过滤指定的值。",
    "es6": "const pull = (arr, ...args) => {let argState = Array.isArray(args[0]) ? args[0] : args;let pulled = arr.filter((v, i) => !argState.includes(v));arr.length = 0;pulled.forEach(v => arr.push(v));};",
    "es5": "",
    "test": "let myArray = ['a', 'b', 'c', 'a', 'b', 'c'];pull(myArray, 'a', 'c'); // myArray = [ 'b', 'b' ]",
    "difficulty":"1"
  },
  {
    "id": "reducedFilter",
    "num": "28",
    "name": "浓缩",
    "descEn":"Filter an array of objects based on a condition while also filtering out unspecified keys.",
    "descCn":"基于一个条件过滤一个对象数组，同时过滤未指定的键。",
    "es6": "const reducedFilter = (data, keys, fn) =>data.filter(fn).map(el =>keys.reduce((acc, key) => {acc[key] = el[key];return acc;}, {}));",
    "es5": "",
    "test": "const data = [{id: 1,name: 'john',age: 24},{id: 2,name: 'mike',age: 50}];reducedFilter(data, ['id', 'name'], item => item.age > 24); // [{ id: 2, name: 'mike'}]",
    "difficulty":"1"
  }

]
