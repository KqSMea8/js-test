[
  {
    "id": "arg",
    "num": "1",
    "name": "arg任意的",
    "type": "adapter",
    "descEn": "Creates a function that accepts up to n arguments, ignoring any additional arguments.",
    "descCn": "创建一个函数，该函数接受最多n个参数，忽略任何附加参数。",
    "es6": "const ary = (fn, n) => (...args) => fn(...args.slice(0, n));",
    "es5": "var ary = function (fn, n) {return fn.apply(null, [].slice.call(arguments, 0, n))}}",
    "test": "const firstTwoMax = ary(Math.max, 2);[[2, 6, 'a'], [8, 4, 6], [10]].map(x => firstTwoMax(...x)); // [6, 8, 10]",
    "difficulty":"1"
  },
  {
    "id": "call",
    "num": "2",
    "name": "call呼叫",
    "type": "adapter",
    "descEn": "Given a key and a set of arguments, call them when given a context. Primarily useful in composition.",
    "descCn": "给定一个键和一组参数，在给定上下文时调用它们。主要用于合成。",
    "es6": "const call = (key, ...args) => context => context[key](...args);",
    "es5": "var call = function (key) {var args = [].slice.call(arguments, 1);return function (context) {return context[key].apply(context, args);}}",
    "test": "var map = call('map', x => 2 * x);map([1,2,3])//[2, 4, 6]",
    "difficulty":"1"
  },
  {
    "id": "collectInto",
    "num": "3",
    "name": "collectInto聚集进入",
    "type": "adapter",
    "descEn": "Changes a function that accepts an array into a variadic function.",
    "descCn": "变化一个函数，让一个可变函数的参数，变成数组传入",
    "es6": "const collectInto = fn => (...args) => fn(args);",
    "es5": "var collectInto = function (fn) {return function () {return fn([].slice.call(arguments))}}",
    "test": "const pall = collectInto(function (arr) {console.log(arr);});pall(1, 2, 3);//[1, 2, 3]",
    "difficulty":"1"
  },
  {
    "id": "flip",
    "num": "4",
    "name": "flip翻转参数",
    "type": "adapter",
    "descEn": "Flip takes a function as an argument, then makes the first argument the last.",
    "descCn": "翻转将函数的参数，使第一个参数成为最后一个参数。",
    "es6": "const flip = fn => (first, ...rest) => fn(...rest, first);",
    "es5": "var flip = function (fn) {return function () {var args = [].slice.call(arguments);var first = args[0];args.shift();args.push(first);return fn.apply(fn, args)}};",
    "test": "var f = flip(function(f,d){console.log(f,d)});f(1,2)",
    "difficulty":"1"
  },
  {
    "id": "over",
    "num": "5",
    "name": "over越过",
    "type": "adapter",
    "descEn": "Creates a function that invokes each provided function with the arguments it receives and returns the results.",
    "descCn": "创建一个函数，传入任意个函数，参数调用每个提供的函数并返回结果。",
    "es6": "const over = (...fns) => (...args) => fns.map(fn => fn.apply(null, args));",
    "es5": "var over  = function () {var fns = [].slice.call(arguments);return function () {var args = [].slice.call(arguments);return fns.map(function (fn) {return fn.apply(null, args);})}}",
    "test": "const minMax = over(Math.min, Math.max);minMax(1, 2, 3, 4, 5); // [1,5]",
    "difficulty":"1"
  },
  {
    "id": "overArgs",
    "num": "6",
    "name": "overArgs",
    "type": "adapter",
    "descEn": "Creates a function that invokes the provided function with its arguments transformed.",
    "descCn": "创建一个函数，该函数调用所提供的函数，并将其参数转换。",
    "es6": "const overArgs = (fn, transforms) => (...args) => fn(...args.map((val, i) => transforms[i](val)));",
    "es5": "var overArgs = function (fn, transforms) {return function () {var args = [].slice.call(arguments);return args.map(function (val, i) {return transforms[i](val)})}}",
    "test": "const square = n => n * n;const double = n => n * 2;const fn = overArgs((x, y) => [x, y], [square, double]);fn(9, 3); // [81, 6]",
    "difficulty":"2"
  },
  {
    "id": "pipeAsyncFunctions",
    "num": "7",
    "name": "pipeAsyncFunctions",
    "type": "adapter",
    "descEn": "Performs left-to-right function composition for asynchronous functions.",
    "descCn": "从左到右的管道去执行异步函数",
    "es6": "const pipeAsyncFunctions = (...fns) => arg => fns.reduce((p, f) => p.then(f), Promise.resolve(arg));",
    "es5": "",
    "test": "const sum = pipeAsyncFunctions(x => x + 1,x => new Promise(resolve => setTimeout(() => resolve(x + 2), 1000)),x => x + 3,async x => (await x) + 4);(async () => {console.log(await sum(5)); // 15 (after one second)})();",
    "difficulty":"3"
  },
  {
    "id": "pipeFunctions",
    "num": "8",
    "name": "pipeFunctions",
    "type": "adapter",
    "descEn": "Performs left-to-right function composition.",
    "descCn": "从左到右的管道去执行函数",
    "es6": "const pipeFunctions = (...fns) => fns.reduce((f, g) => (...args) => g(f(...args)));",
    "es5": "",
    "test": "const add5 = x => x + 5;const multiply = (x, y) => x * y;const multiplyAndAdd5 = pipeFunctions(multiply, add5);multiplyAndAdd5(5, 2); // 15",
    "difficulty":"3"
  },
  {
    "id": "promisify",
    "num": "9",
    "name": "promisify化",
    "descEn":"Converts an asynchronous function to return a promise.",
    "descCn":"转换异步函数返回一个promise。",
    "es6": "const promisify = func => (...args) =>new Promise((resolve, reject) =>func(...args, (err, result) => (err ? reject(err) : resolve(result))));",
    "es5": "var promisify = function promisify(func) {return function () {var args = [].slice.call(arguments);return new Promise(function (resolve, reject) {return func.apply(undefined, args.concat([function (err, result) {return err ? reject(err) : resolve(result);}]));});};};",
    "test": "const delay = promisify((d, cb) => setTimeout(cb, d));delay(2000).then(() => console.log('Hi!')); // // Promise resolves after 2s",
    "difficulty": "3"
  },
  {
    "id": "rearg",
    "num": "10",
    "name": "",
    "descEn":"Creates a function that invokes the provided function with its arguments arranged according to the specified indexes.",
    "descCn":"Creates a function that invokes the provided function with its arguments arranged according to the specified indexes.",
    "es6": "const rearg = (fn, indexes) => (...args) =>fn(...args.reduce((acc, val, i) => ((acc[indexes.indexOf(i)] = val), acc),Array.from({ length: indexes.length })));",
    "es5": "var rearg = function (fn, indexes) {return function () {var args = [].slice.call(arguments);var d = args.reduce(function (acc, val, i) {acc[indexes.indexOf(i)] = val;return acc;}, Array(3))return fn.apply(null, d}}",
    "test": "var rearged = rearg(function(a, b, c) {return [a, b, c];},[2, 0, 1]);rearged('b', 'c', 'a'); // ['a', 'b', 'c']",
    "difficulty":"2"
  },
  {
    "id": "bifurcate",
    "num": "11",
    "name": "分叉",
    "descEn":"Splits values into two groups. If an element in filter is truthy, the corresponding element in the collection belongs to the first group; otherwise, it belongs to the second group.",
    "descCn":"将值分成两组。如果在过滤器的元素是真相，集合中的对应元素属于第一集团；否则，它属于第二组。",
    "es6": "const rearg = (fn, indexes) => (...args) =>fn(...args.reduce((acc, val, i) => ((acc[indexes.indexOf(i)] = val), acc),Array.from({ length: indexes.length })));",
    "es5": "var rearg = function (fn, indexes) {return function () {var args = [].slice.call(arguments);var d = args.reduce(function (acc, val, i) {acc[indexes.indexOf(i)] = val;return acc;}, Array(3))return fn.apply(null, d}}",
    "test": "bifurcate(['beep', 'boop', 'foo', 'bar'], [true, true, false, true]); // [ ['beep', 'boop', 'bar'], ['foo'] ]",
    "difficulty": "2"
  },
  {
    "id": "chunk",
    "num": "12",
    "name": "分组",
    "descEn":"Chunks an array into smaller arrays of a specified size",
    "descCn":"将数组分割成特定大小的小数组。",
    "es6": "const chunk = (arr, size) = Array.from({ length: Math.ceil(arr.length / size) }, (v, i) =>arr.slice(i * size, i * size + size));",
    "es5": "",
    "test": "chunk([1, 2, 3, 4, 5], 2); // [[1,2],[3,4],[5]]",
    "difficulty":"2"
  },
  {
    "id": "partition",
    "num": "25",
    "name": "分隔",
    "descEn":"Groups the elements into two arrays, depending on the provided function's truthiness for each element.",
    "descCn":"将元素分组为两个数组，这取决于为每个元素提供的函数的truthiness。",
    "es6": "const partition = (arr, fn) =>arr.reduce((acc, val, i, arr) => {acc[fn(val, i, arr) ? 0 : 1].push(val);return acc;},[[], []]);",
    "es5": "",
    "test": "const users = [{ user: 'barney', age: 36, active: false }, { user: 'fred', age: 40, active: true }];partition(users, o => o.active);",
    "difficulty":"2"
  },
  {
    "id": "permutations",
    "num": "26",
    "name": "排列",
    "descEn":"Generates all permutations of an array's elements (contains duplicates).",
    "descCn":"生成数组元素的所有排列(包含重复项)。",
    "es6": "",
    "es5": "",
    "test": "permutations([1, 33, 5]); // [ [ 1, 33, 5 ], [ 1, 5, 33 ], [ 33, 1, 5 ], [ 33, 5, 1 ], [ 5, 1, 33 ], [ 5, 33, 1 ] ]",
    "difficulty":"4"
  },
  {
    "id": "pull",
    "num": "27",
    "name": "拉",
    "descEn":"Mutates the original array to filter out the values specified.",
    "descCn":"对原始数组进行修改，以过滤指定的值。",
    "es6": "const pull = (arr, ...args) => {let argState = Array.isArray(args[0]) ? args[0] : args;let pulled = arr.filter((v, i) => !argState.includes(v));arr.length = 0;pulled.forEach(v => arr.push(v));};",
    "es5": "",
    "test": "let myArray = ['a', 'b', 'c', 'a', 'b', 'c'];pull(myArray, 'a', 'c'); // myArray = [ 'b', 'b' ]",
    "difficulty":"2"
  },
  {
    "id": "reducedFilter",
    "num": "28",
    "name": "浓缩",
    "descEn":"Filter an array of objects based on a condition while also filtering out unspecified keys.",
    "descCn":"基于一个条件过滤一个对象数组，同时过滤未指定的键。",
    "es6": "const reducedFilter = (data, keys, fn) =>data.filter(fn).map(el =>keys.reduce((acc, key) => {acc[key] = el[key];return acc;}, {}));",
    "es5": "",
    "test": "const data = [{id: 1,name: 'john',age: 24},{id: 2,name: 'mike',age: 50}];reducedFilter(data, ['id', 'name'], item => item.age > 24); // [{ id: 2, name: 'mike'}]",
    "difficulty":"1"
  },
  {
    "id": "remove",
    "num": "29",
    "name": "开除",
    "descEn":"Removes elements from an array for which the given function returns false.",
    "descCn":"从数组中删除给定函数返回false的元素。",
    "es6": "const remove = (arr, func) =>Array.isArray(arr)? arr.filter(func).reduce((acc, val) => {arr.splice(arr.indexOf(val), 1);return acc.concat(val);}, []) : [];",
    "es5": "",
    "test": "remove([1, 2, 3, 4], n => n % 2 === 0); // [2, 4]",
    "difficulty":"2"
  },
  {
    "id": "shuffle",
    "num": "30",
    "name": "打乱",
    "descEn":"Randomizes the order of the values of an array, returning a new array.",
    "descCn":"随机化一个数组的值的顺序，返回一个新的数组。",
    "es6": "const shuffle = ([...arr]) => {let m = arr.length;while (m) {const i = Math.floor(Math.random() * m--);[arr[m], arr[i]] = [arr[i], arr[m]];return arr;};",
    "es5": "",
    "test": "const foo = [1, 2, 3];shuffle(foo); // [2,3,1], foo = [1,2,3]",
    "difficulty":"2"
  },
  {
    "id": "symmetricDifference",
    "num": "31",
    "name": "对称差分",
    "descEn":"Returns the symmetric difference between two arrays.",
    "descCn":"返回两个数组之间的对称差异。",
    "es6": "const symmetricDifference = (a, b) => {const sA = new Set(a),sB = new Set(b);return [...a.filter(x => !sB.has(x)), ...b.filter(x => !sA.has(x))];};",
    "es5": "",
    "test": "symmetricDifference([1, 2, 3], [1, 2, 4]); // [3,4]",
    "difficulty":"2"
  },
  {
    "id": "take",
    "num": "32",
    "name": "取",
    "descEn":"Returns an array with n elements removed from the beginning.",
    "descCn":"返回删除了n个元素的数组。",
    "es6": "const take = (arr, n = 1) => arr.slice(0, n);",
    "es5": "",
    "test": "take([1, 2, 3], 5); // [1, 2, 3]",
    "difficulty":"2"
  },
  {
    "id": "union",
    "num": "33",
    "name": "联合",
    "descEn":"Returns every element that exists in any of the two arrays once.",
    "descCn":"返回两个数组中任何一个元素的所有元素。",
    "es6": "const union = (a, b) => [...new Set([...a, ...b])];const union = (a, b) => Array.from(new Set([...a, ...b]));",
    "es5": "",
    "test": "union([1, 2, 3], [4, 3, 2]); // [1,2,3,4]",
    "difficulty":"1"
  },
  {
    "id": "unzip",
    "num": "34",
    "name": "拉开",
    "descEn":"Creates an array of arrays, ungrouping the elements in an array produced by zip",
    "descCn":"创建数组的数组，将数组中的元素分组，并由zip生成。",
    "es6": "const unzip = arr =>arr.reduce((acc, val) => (val.forEach((v, i) => acc[i].push(v)), acc),Array.from({length: Math.max(...arr.map(x => x.length))}).map(x => []));",
    "es5": "",
    "test": "unzip([['a', 1, true], ['b', 2, false]]); //[['a', 'b'], [1, 2], [true, false]]",
    "difficulty":"2"
  },
  {
    "id": "zip",
    "num": "35",
    "name": "打包",
    "descEn":"Creates an array of elements, grouped based on the position in the original arrays.",
    "descCn":"创建一个元素数组，根据原始数组中的位置分组。",
    "es6": "const zip = (...arrays) => {const maxLength = Math.max(...arrays.map(x => x.length));return Array.from({ length: maxLength }).map((_, i) => {return Array.from({ length: arrays.length }, (_, k) => arrays[k][i]);});};",
    "es5": "",
    "test": "zip(['a', 'b'], [1, 2], [true, false]); // [['a', 1, true], ['b', 2, false]]",
    "difficulty":"2"
  },
  {
    "id": "bottomVisible",
    "num": "36",
    "name": "底部可见",
    "descEn":"",
    "descCn":"如果页面底部可见，则返回true，否则为false。",
    "es6": "const bottomVisible = () =>document.documentElement.clientHeight + window.scrollY >=(document.documentElement.scrollHeight || document.documentElement.clientHeight);",
    "es5": "",
    "test": "",
    "difficulty":"1"
  },
  {
    "id": "copyToClipboard",
    "num": "37",
    "name": "拷贝到剪切板",
    "descEn":"Copy a string to the clipboard. Only works as a result of user action (i.e. inside a click event listener).",
    "descCn":"将字符串复制到剪贴板。只有在用户操作(即在单击事件监听器内)才能工作。",
    "es5": "",
    "es6": "",
    "test": "",
    "difficulty":"3"
  },
  {
    "id": "createEventHub",
    "num": "38",
    "name": "创建事件的发布订阅",
    "descEn":"Creates a pub/sub (publish–subscribe) event hub with emit, on, and off methods.",
    "descCn":"创建一个发布/订阅事件中心，它可以发出、打开和关闭方法。",
    "es5": "",
    "es6": "",
    "test": "",
    "difficulty":"3"
  },
  {
    "id": "detectDeviceType",
    "num": "39",
    "name": "获取设备类型",
    "descEn":"Detects wether the website is being opened in a mobile device or a desktop/laptop.",
    "descCn":"检测网站是否在移动设备或台式/笔记本电脑上打开",
    "es5": "",
    "es6": "const detectDeviceType = () =>/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)? 'Mobile': 'Desktop';",
    "test": "",
    "difficulty":"1"
  },
  {
    "id": "elementIsVisibleInViewport",
    "num": "40",
    "name": "元素在viewport中是否可见",
    "descEn":"Returns true if the element specified is visible in the viewport, false otherwise.",
    "descCn":"如果指定的元素在viewport中可见，则返回true，否则为false",
    "es5": "",
    "es6": "const elementIsVisibleInViewport = (el, partiallyVisible = false) => {const { top, left, bottom, right } = el.getBoundingClientRect();const { innerHeight, innerWidth } = window;return partiallyVisible? ((top > 0 && top < innerHeight) || (bottom > 0 && bottom < innerHeight)) &&((left > 0 && left < innerWidth) || (right > 0 && right < innerWidth)): top >= 0 && left >= 0 && bottom <= innerHeight && right <= innerWidth;};",
    "test": "",
    "difficulty":"1"

  },
  {
    "id": "getScrollPosition",
    "num": "41",
    "name": "得到滑动的位置",
    "descEn":"Returns the value of a CSS rule for the specified element.",
    "descCn":"返回指定元素的CSS样式的值。",
    "es5": "",
    "es6": "const getScrollPosition = (el = window) => ( x: el.pageXOffset !== undefined ? el.pageXOffset : el.scrollLeft,y: el.pageYOffset !== undefined ? el.pageYOffset : el.screenTop});",
    "test": "",
    "difficulty":"1"

  },
  {
    "id": "getStyle",
    "num": "42",
    "name": "得到样式",
    "descEn":"Returns the scroll position of the current page.",
    "descCn":"返回当前页面的滚动位置。",
    "es5": "",
    "es6": "const getStyle = (el, ruleName) => getComputedStyle(el)[ruleName]",
    "test": "",
    "difficulty":"1"
  },
  {
    "id": "observeMutations",
    "num": "43",
    "name": "观察突变",
    "descEn":"Returns a new MutationObserver and runs the provided callback for each mutation on the specified element.",
    "descCn":"返回一个新的MutationObserver，并为指定元素上的每个突变运行提供的回调。",
    "es5": "",
    "es6": "const observeMutations = (element, callback, options) => {const observer = new MutationObserver(mutations => mutations.forEach(m => callback(m)));observer.observe(element,Object.assign({childList: true,attributes: true,attributeOldValue: true,characterData: true,characterDataOldValue: true,subtree: true},options));return observer;};",
    "test": "",
    "difficulty":"4"
  },
  {
    "id": "off",
    "num": "44",
    "name": "取消事件",
    "descEn":"Removes an event listener from an element.",
    "descCn":"",
    "es5": "",
    "es6": "const off = (el, evt, fn, opts = false) => el.removeEventListener(evt, fn, opts);",
    "test": "",
    "difficulty":"1"
  },
  {
    "id": "onUserInputChange",
    "num": "45",
    "name": "监听用户输入",
    "descEn":"Run the callback whenever the user input type changes (mouse or touch). Useful for enabling/disabling code depending on the input device. This process is dynamic and works with hybrid devices (e.g. touchscreen laptops).",
    "descCn":"在用户输入类型更改(鼠标或触摸)时运行回调。对启用/禁用依赖于输入设备的代码非常有用。这个过程是动态的，并与混合设备(例如触摸屏笔记本)一起工作。",
    "es5": "",
    "es6": "",
    "test": "",
    "difficulty":"3"
  },
  {
    "id": "recordAnimationFrames",
    "num": "46",
    "name": "",
    "descEn":"Invokes the provided callback on each animation frame.",
    "descCn":"在每个动画框架上调用提供的回调。",
    "es5": "",
    "es6": "const recordAnimationFrames = (callback, autoStart = true) => {let running = true,raf;const stop = () => {running = false;cancelAnimationFrame(raf);;const start = () => {running = true;run();;const run = () => {raf = requestAnimationFrame(() => {callback();if (running) run(););};if (autoStart) start();return { start, stop };};",
    "test": "",
    "difficulty":"4"
  },
  {
    "id": "runAsync",
    "num": "47",
    "name": "运行异步",
    "descEn":"Runs a function in a separate thread by using a Web Worker, allowing long running functions to not block the UI",
    "descCn":"通过使用Web Worker在一个单独的线程中运行一个函数，允许长时间运行的函数不阻塞UI。",
    "es5": "",
    "es6": "",
    "test": "",
    "difficulty":"4"
  },
  {
    "id": "scrollToTop",
    "num": "48",
    "name": "滑动到顶部",
    "descEn":"Smooth-scrolls to the top of the page.",
    "descCn":"平滑滚动到页面顶端。",
    "es5": "",
    "es6": "const scrollToTop = () => {const c = docment.documentElement.scrollTop || docment.body.scrollTop;if (c > 0) {window.requestAnimationFrame(screenTop);window.screenTop(0, c - c / 8)}}",
    "test": "",
    "difficulty":"2"
  },
  {
    "id": "smoothScroll",
    "num": "49",
    "name": "平稳的滑动",
    "descEn":"Smoothly scrolls the element on which it's called into the visible area of the browser window.",
    "descCn":"平滑地滚动到浏览器窗口可见区域的元素",
    "es5": "",
    "es6": "const smoothScroll = element =>document.querySelector(element).scrollIntoView({behavior: 'smooth'});",
    "test": "",
    "difficulty":"1"
  },
  {
    "id": "UUIDGeneratorBrowser",
    "num": "50",
    "name": "浏览器uuid",
    "descEn":"Generates a UUID in a browser",
    "descCn":"Generates a UUID in a browser",
    "es5": "",
    "es6": "const UUIDGeneratorBrowser = () =>([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, c =>(c ^ (crypto.getRandomValues(new Uint8Array(1))[0] & (15 >> (c / 4)))).toString(16));",
    "test": "",
    "difficulty":"4"
  },
  {
    "id": "formatDuration",
    "num": "51",
    "name": "平稳的滑动",
    "descEn":"Returns the human readable format of the given number of milliseconds.",
    "descCn":"返回给定的毫秒数的人类可读格式。",
    "es5": "",
    "es6": "",
    "test": "",
    "difficulty":"2"
  },
  {
    "id": "tomorrow",
    "num": "52",
    "name": "",
    "descEn":"Results in a string representation of tomorrow's date",
    "descCn":"结果以字符串表示明天的日期。",
    "es5": "",
    "es6": "const tomorrow = (long = false) => {let t = new Date();t.setDate(t.getDate() + 1);const ret = `${t.getFullYear()}-${String(t.getMonth() + 1).padStart(2, '0')}-${String(t.getDate()).padStart(2, '0')}`;return !long ? ret : `${ret}T00:00:00`;};",
    "test": "",
    "difficulty":"3"
  },
  {
    "id": "attempt",
    "num": "53",
    "name": "尝试",
    "descEn":"Attempts to invoke a function with the provided arguments, returning either the result or the caught error object.",
    "descCn":"尝试使用提供的参数调用函数，返回结果或捕获的错误对象。",
    "es5": "var attempt = function (fn) {try {return fn.apply(fn, [].slice.call(arguments, 1))} catch (e) {return e instanceof Error ? e : new Error(e)}}",
    "es6": "const attempt = (fn, ...args) => {try {return fn(...args);} catch (e) {return e instanceof Error ? e : new Error(e);}};",
    "test": "",
    "difficulty":"1"
  },
  {
    "id": "bind",
    "num": "54",
    "name": "bind",
    "descEn":"Creates a function that invokes fn with a given context, optionally adding any additional supplied parameters to the beginning of the arguments.",
    "descCn":"创建一个函数，它使用给定的上下文调用fn，并可以在参数的开头添加任何附加的参数。",
    "es5": "",
    "es6": "const bind = (fn, context, ...args) =>function() {return fn.apply(context, args.concat(...arguments));};",
    "test": "",
    "difficulty":"1"
  },
  {
    "id": "chainAsync",
    "num": "55",
    "name": "链式异步",
    "descEn":"Chains asynchronous functions.",
    "descCn":"",
    "es5": "",
    "es6": "const chainAsync = fns => {let curr = 0;const next = () => fns[curr++](next);next();};",
    "test": "",
    "difficulty":"3"
  },
  {
    "id": "compose",
    "num": "56",
    "name": "",
    "descEn":"Performs right-to-left function composition.",
    "descCn":"",
    "es5": "",
    "es6": "const compose = (...fns) => fns.reduce((f, g) => (...args) => f(g(...args)));",
    "test": "",
    "difficulty":"3"
  },
  {
    "id": "converge",
    "num": "57",
    "name": "收敛",
    "descEn":"Accepts a converging function and a list of branching functions and returns a function that applies each branching function to the arguments and the results of the branching functions are passed as arguments to the converging function.",
    "descCn":"接受一个收敛函数和一个分支函数列表，并返回一个函数，该函数将每个分支函数应用于参数，并将分支函数的结果作为参数传递给聚合函数。",
    "es6": "const converge = (converger, fns) => (...args) => converger(...fns.map(fn => fn.apply(null, args)));",
    "es5": "",
    "test": "",
    "difficulty":"3"
  },
  {
    "id": "curry",
    "num": "58",
    "name": "柯里化",
    "descEn":"Curries a function",
    "descCn":"柯里化一个函数",
    "es6": "const curry = (fn, arity = fn.length, ...args) =>arity <= args.length ? fn(...args) : curry.bind(null, fn, arity, ...args);",
    "es5": "",
    "test": "",
    "difficulty":"3"
  },
  {
    "id": "debounce",
    "num": "59",
    "name": "去抖动",
    "descEn":"Creates a debounced function that delays invoking the provided function until at least ms milliseconds have elapsed since the last time it was invoked.",
    "descCn":"去抖动",
    "es6": "const debounce = (fn, ms = 0) => {let timeoutId;return function(...args) {clearTimeout(timeoutId);timeoutId = setTimeout(() => fn.apply(this, args), ms);};};",
    "es5": "",
    "test": "",
    "difficulty":"3"
  },
  {
    "id": "memoize",
    "num": "60",
    "name": "",
    "descEn":"Creates a debounced function that delays invoking the provided function until at least ms milliseconds have elapsed since the last time it was invoked.",
    "descCn":"记住",
    "es5": "",
    "es6": "const memoize = fn => {const cache = new Map();const cached = function(val) {return cache.has(val) ? cache.get(val) : cache.set(val, fn.call(this, val)) && cache.get(val);};cached.cache = cache;return cached;};",
    "test": "",
    "difficulty":"3"
  },
  {
    "id": "once",
    "num": "61",
    "name": "执行一次",
    "descEn":"Ensures a function is called only once.",
    "descCn":"",
    "es5": "",
    "es6": "const once = fn => {let called = false;return function(...args) {if (called) return;called = true;return fn.apply(this, args);};};",
    "test": "",
    "difficulty":"2"
  },
  {
    "id": "partial",
    "num": "62",
    "name": "部分求值",
    "descEn":"Creates a function that invokes fn with partials prepended to the arguments it receives.",
    "descCn":"创建一个调用fn的函数，并对其接收到的参数进行预先处理。",
    "es5": "",
    "es6": "const partial = (fn, ...partials) => (...args) => fn(...partials, ...args);",
    "test": "",
    "difficulty":"2"
  },
  {
    "id": "runPromisesInSeries",
    "num": "63",
    "name": "批量运行promises",
    "descEn":"Runs an array of promises in series.",
    "descCn":"在系列中运行一系列的promise。",
    "es5": "",
    "es6": "const runPromisesInSeries = ps => ps.reduce((p, next) => p.then(next), Promise.resolve());",
    "test": "const delay = d => new Promise(r => setTimeout(r, d));runPromisesInSeries([() => delay(1000), () => delay(2000)]); ",
    "difficulty":"3"
  },
  {
    "id": "throttle",
    "num": "64",
    "name": "节流函数",
    "descEn":"",
    "descCn":"",
    "es5": "",
    "es6": "",
    "test": "",
    "difficulty":"3"
  },
  {
    "id": "times",
    "num": "65",
    "name": "",
    "descEn":"Iterates over a callback n times",
    "descCn":"迭代回叫n次",
    "es5": "",
    "es6": "const times = (n, fn, context = undefined) => {let i = 0;while (fn.call(context, i) !== false && ++i < n) {}};",
    "test": "var output = '';times(5, i => (output += i));console.log(output); // 01234",
    "difficulty":"2"
  },
  {
    "id": "uncurry",
    "num": "66",
    "name": "",
    "descEn":"Uncurries a function up to depth n.",
    "descCn":"使一个函数达到深度n。",
    "es5": "",
    "es6": "const uncurry = (fn, n = 1) => (...args) => {const next = acc => args => args.reduce((x, y) => x(y), acc);if (n > args.length) throw new RangeError('Arguments too few!');return next(fn)(args.slice(0, n));};",
    "test": "",
    "difficulty":"4"
  },
  {
    "id": "unfold",
    "num": "67",
    "name": "",
    "descEn":"Builds an array, using an iterator function and an initial seed value.",
    "descCn":"使用迭代器函数和初始种子值构建一个数组。",
    "es5": "",
    "es6": "const unfold = (fn, seed) => {let result = [],val = [null, seed];while ((val = fn(val[1]))) result.push(val[0]);return result;};",
    "test": "",
    "difficulty":"2"
  },
  {
    "id": "maxBy",
    "num": "68",
    "name": "最大通过",
    "descEn":"",
    "descCn":"",
    "es5": "",
    "es6": "const maxBy = (arr, fn) => Math.max(...arr.map(typeof fn === 'function' ? fn : val => val[fn]));",
    "test": "maxBy([{ n: 4 }, { n: 2 }, { n: 8 }, { n: 6 }], o => o.n); // 8",
    "difficulty":"1"
  },
  {
    "id": "powerset",
    "num": "69",
    "name": "",
    "descEn":"Returns the powerset of a given array of numbers.",
    "descCn":"返回给定数组的幂集。",
    "es5": "",
    "es6": "const powerset = arr => arr.reduce((a, v) => a.concat(a.map(r => [v].concat(r))), [[]]);",
    "test": "powerset([1, 2]); // [[], [1], [2], [2,1]]",
    "difficulty":"2"
  },
  {
    "id": "primes",
    "num": "70",
    "name": "精华",
    "descEn":"",
    "descCn":"",
    "es5": "",
    "es6": "",
    "test": "",
    "difficulty":"3"
  },
  {
    "id": "randomIntArrayInRange",
    "num": "71",
    "name": "",
    "descEn":"Returns an array of n random integers in the specified range.",
    "descCn":"返回指定范围内的n个随机整数数组。",
    "es5": "",
    "es6": "const randomIntArrayInRange = (min, max, n = 1) =>Array.from({ length: n }, () => Math.floor(Math.random() * (max - min + 1)) + min);",
    "test": "",
    "difficulty":"1"
  },
  {
    "id": "round",
    "num": "72",
    "name": "",
    "descEn":"Rounds a number to a specified amount of digits.",
    "descCn":"将数字发送到指定数量的数字。",
    "es5": "",
    "es6": "const round = (n, decimals = 0) => Number(`${Math.round(`${n}e${decimals}`)}e-${decimals}`);",
    "test": "",
    "difficulty":"2"
  },
  {
    "id": "sdbm",
    "num": "73",
    "name": "",
    "descEn":"Hashes the input string into a whole number.",
    "descCn":"将输入字符串散列成整数。",
    "es5": "",
    "es6": "const sdbm = str => {let arr = str.split('');return arr.reduce((hashCode, currentVal) =>(hashCode = currentVal.charCodeAt(0) + (hashCode << 6) + (hashCode << 16) - hashCode),0);};",
    "test": "",
    "difficulty":"4"
  },
  {
    "id": "sumBy",
    "num": "74",
    "name": "",
    "descEn":"Returns the sum of an array, after mapping each element to a value using the provided function.",
    "descCn":"返回数组的和，然后使用所提供的函数将每个元素映射到一个值。",
    "es5": "",
    "es6": "const sumBy = (arr, fn) =>arr.map(typeof fn === 'function' ? fn : val => val[fn]).reduce((acc, val) => acc + val, 0);",
    "test": "",
    "difficulty":"2"
  },
  {
    "id": "toSafeInteger",
    "num": "75",
    "name": "",
    "descEn":"Converts a value to a safe integer.",
    "descCn":"",
    "es5": "",
    "es6": "const toSafeInteger = num =>Math.round(Math.max(Math.min(num, Number.MAX_SAFE_INTEGER), Number.MIN_SAFE_INTEGER));",
    "test": "",
    "difficulty":"2"
  },
  {
    "id": "bindAll",
    "num": "76",
    "name": "",
    "descEn":"Binds methods of an object to the object itself, overwriting the existing method..",
    "descCn":"",
    "es5": "",
    "es6": "const bindAll = (obj, ...fns) =>fns.forEach(fn => ((f = obj[fn]),(obj[fn] = function() {return f.apply(obj);})));",
    "test": "",
    "difficulty":"2"
  },
  {
    "id": "deepClone",
    "num": "77",
    "name": "深拷贝",
    "descEn":"Creates a deep clone of an object.",
    "descCn":"创建一个对象的深度克隆。",
    "es5": "",
    "es6": "const deepClone = obj => {let clone = Object.assign({}, obj);Object.keys(clone).forEach(key => (clone[key] = typeof obj[key] === 'object' ? deepClone(obj[key]) : obj[key]));return clone;;",
    "test": "",
    "difficulty":"2"
  },
  {
    "id": "flattenObject",
    "num": "78",
    "name": "扁平一个对象",
    "descEn":"Flatten an object with the paths for keys",
    "descCn":"扁平化一个对象使用keys当做路径",
    "es5": "",
    "es6": "const flattenObject = (obj, prefix = '') =>Object.keys(obj).reduce((acc, k) => {const pre = prefix.length ? prefix + '.' : '';if (typeof obj[k] === 'object') Object.assign(acc, flattenObject(obj[k], pre + k));else acc[pre + k] = obj[k];return acc;}, {});",
    "test": "",
    "difficulty":"2"
  },
  {
    "id": "functions",
    "num": "79",
    "name": "",
    "descEn":"Returns an array of function property names from own (and optionally inherited) enumerable properties of an object.",
    "descCn":"从一个对象的自身(以及可选继承的)可枚举属性中返回一个函数属性名数组。",
    "es5": "",
    "es6": "const functions = (obj, inherited = false) =>(inherited? [...Object.keys(obj), ...Object.keys(Object.getPrototypeOf(obj))]: Object.keys(obj)).filter(key => typeof obj[key] === 'function');",
    "test": "",
    "difficulty":"2"
  },
  {
    "id": "get",
    "num": "80",
    "name": "",
    "descEn":"Retrieve a set of properties indicated by the given selectors from an object.",
    "descCn":"从对象中检索给定选择器所指示的一组属性。",
    "es5": "",
    "es6": "const get = (from, ...selectors) =>[...selectors].map(s =>s.replace(/\[([^\[\]]*)\]/g, '.$1.').split('.').filter(t => t !== '').reduce((prev, cur) => prev && prev[cur], from));",
    "test": "",
    "difficulty":"3"
  },
  {
    "id": "invertKeyValues",
    "num": "81",
    "name": "",
    "descEn":"Inverts the key-value pairs of an object, without mutating it. The corresponding inverted value of each inverted key is an array of keys responsible for generating the inverted value. If a function is supplied, it is applied to each inverted key.",
    "descCn":"key and vlaue",
    "es5": "",
    "es6": "const invertKeyValues = (obj, fn) =>Object.keys(obj).reduce((acc, key) => {const val = fn ? fn(obj[key]) : obj[key];acc[val] = acc[val] || [];acc[val].push(key);return acc;}, {});",
    "test": "",
    "difficulty":"3"
  },
  {
    "id": "matches",
    "num": "82",
    "name": "",
    "descEn":"Compares two objects to determine if the first one contains equivalent property values to the second one.",
    "descCn":"比较两个对象，以确定第一个对象是否包含第二个对象的等价属性值。",
    "es5": "",
    "es6": "const matches = (obj, source) =>Object.keys(source).every(key => obj.hasOwnProperty(key) && obj[key] === source[key]);",
    "test": "",
    "difficulty":"2"
  },
  {
    "id": "merge",
    "num": "83",
    "name": "",
    "descEn":"Creates a new object from the combination of two or more objects.",
    "descCn":"从两个或多个对象的组合创建一个新对象。",
    "es5": "",
    "es6": "const merge = (...objs) =>[...objs].reduce((acc, obj) =>Object.keys(obj).reduce((a, k) => {acc[k] = acc.hasOwnProperty(k) ? [].concat(acc[k]).concat(obj[k]) : obj[k];return acc;}, {}),{});",
    "test": "",
    "difficulty":"2"
  },
  {
    "id": "nest",
    "num": "84",
    "name": "",
    "descEn":"Given a flat array of objects linked to one another, it will nest them recursively. Useful for nesting comments, such as the ones on reddit.com.",
    "descCn":"给定一个相互关联的平面数组，它会递归地嵌套它们。用于嵌套注释，如reddit.com上的注释。",
    "es5": "",
    "es6": "const nest = (items, id = null, link = 'parent_id') =>items.filter(item => item[link] === id).map(item => ({ ...item, children: nest(items, item.id) }));",
    "test": "",
    "difficulty":"3"
  },
  {
    "id": "objectFromPairs",
    "num": "85",
    "name": "",
    "descEn":"Creates an object from the given key-value pairs.",
    "descCn":"从给定的键值对创建一个对象。",
    "es5": "",
    "es6": "const objectFromPairs = arr => arr.reduce((a, v) => ((a[v[0]] = v[1]), a), {});",
    "test": "objectFromPairs([['a', 1], ['b', 2]]); // {a: 1, b: 2}",
    "difficulty":"2"
  },
  {
    "id": "omit",
    "num": "86",
    "name": "",
    "descEn":"Omits the key-value pairs corresponding to the given keys from an object.",
    "descCn":"从一个对象中，省略与给定键对应的键值对。",
    "es5": "",
    "es6": "const omit = (obj, arr) =>Object.keys(obj).filter(k => !arr.includes(k)).reduce((acc, key) => ((acc[key] = obj[key]), acc), {});",
    "test": "omit({ a: 1, b: '2', c: 3 }, ['b']); // { 'a': 1, 'c': 3 }",
    "difficulty":"2"
  },
  {
    "id": "omitby",
    "num": "87",
    "name": "",
    "descEn":"Omits the key-value pairs corresponding to the given keys from an object.",
    "descCn":"从一个对象中，省略与给定键对应的键值对。",
    "es5": "",
    "es6": "const omitBy = (obj, fn) =>Object.keys(obj).filter(k => !fn(obj[k], k)).reduce((acc, key) => ((acc[key] = obj[key]), acc), {});",
    "test": "omitBy({ a: 1, b: '2', c: 3 }, x => typeof x === 'number'); // { b: '2' }",
    "difficulty":"2"
  },
  {
    "id": "pick",
    "num": "88",
    "name": "",
    "descEn":"Picks the key-value pairs corresponding to the given keys from an object.",
    "descCn":"从对象中选择对应于给定键的键值对。",
    "es5": "",
    "es6": "const pick = (obj, arr) =>arr.reduce((acc, curr) => (curr in obj && (acc[curr] = obj[curr]), acc), {});",
    "test": "pick({ a: 1, b: '2', c: 3 }, ['a', 'c']); // { 'a': 1, 'c': 3 }",
    "difficulty":"2"
  },
  {
    "id": "shallowClone",
    "num": "89",
    "name": "",
    "descEn":"Creates a shallow clone of an object.",
    "descCn":"创建对象的一个浅克隆。",
    "es5": "",
    "es6": "const shallowClone = obj => Object.assign({}, obj);",
    "test": "",
    "difficulty":"1"
  },
  {
    "id": "size",
    "num": "90",
    "name": "",
    "descEn":"Get size of arrays, objects or strings.",
    "descCn":"获取数组、对象或字符串的大小。",
    "es5": "",
    "es6": "const size = val =>Array.isArray(val) ? val.length: val && typeof val === 'object' ? val.size || val.length || Object.keys(val).length: typeof val === 'string' ? new Blob([val]).size : 0;",
    "test": "size([1, 2, 3, 4, 5]); // 5size('size'); // 4size({ one: 1, two: 2, three: 3 }); // 3",
    "difficulty":"2"
  },
  {
    "id": "capitalizeEveryWord",
    "num": "92",
    "name": "",
    "descEn":"Capitalizes the first letter of every word in a string.",
    "descCn":"",
    "es5": "",
    "es6": "const capitalizeEveryWord = str => str.replace(/\b[a-z]/g, char => char.toUpperCase());",
    "test": "",
    "difficulty":"1"
  },
  {
    "id": "unflattenObject",
    "num": "94",
    "name": "",
    "descEn":"",
    "descCn":"",
    "es5": "",
    "es6": "",
    "test": "",
    "difficulty":"4"
  },
  {
    "id": "escapeHTML",
    "num": "95",
    "name": "",
    "descEn":"Escapes a string for use in HTML.",
    "descCn":"",
    "es5": "",
    "es6": "",
    "test": "",
    "difficulty":"1"
  },
  {
    "id": "escapeRegExp",
    "num": "96",
    "name": "",
    "descEn":"Escapes a string to use in a regular expression.",
    "descCn":"",
    "es5": "",
    "es6": "const escapeRegExp = str => str.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');",
    "test": "",
    "difficulty":"1"
  },
  {
    "id": "fromCamelCase",
    "num": "97",
    "name": "",
    "descEn":"Escapes a string to use in a regular expression.",
    "descCn":"",
    "es5": "",
    "es6": "const fromCamelCase = (str, separator = '_') =>str.replace(/([a-z\d])([A-Z])/g, '$1' + separator + '$2').replace(/([A-Z]+)([A-Z][a-z\d]+)/g, '$1' + separator + '$2').toLowerCase();",
    "test": " fromCamelCase('someDatabaseFieldName', ' '); // 'some database field name'",
    "difficulty":"2"
  },
  {
    "id": "isAbsoluteURL",
    "num": "98",
    "name": "",
    "descEn":"Returns true if the given string is an absolute URL, false otherwise.",
    "descCn":"如果给定的字符串是绝对URL，则返回true，否则为false。",
    "es5": "",
    "es6": "const isAbsoluteURL = str => /^[a-z][a-z0-9+.-]*:/.test(str);",
    "test": "isAbsoluteURL('https://google.com'); // true",
    "difficulty":"1"
  },
  {
    "id": "isAnagram",
    "num": "99",
    "name": "",
    "descEn":"Checks if a string is an anagram of another string (case-insensitive, ignores spaces, punctuation and special characters).",
    "descCn":"检查字符串是否是另一个字符串的字符(不区分大小写，忽略空格、标点符号和特殊字符)。",
    "es5": "",
    "es6": "const isAnagram = (str1, str2) => {const normalize = str =>str.toLowerCase().replace(/[^a-z0-9]/gi, '').split('').sort().join('');return normalize(str1) === normalize(str2);};",
    "test": "isAnagram('iceman', 'cinema'); // true",
    "difficulty":"1"
  },
  {
    "id": "mask",
    "num": "100",
    "name": "",
    "descEn":"Replaces all but the last num of characters with the specified mask character.",
    "descCn":"用指定的掩码字符替换所有的字符。",
    "es5": "",
    "es6": "const mask = (cc, num = 4, mask = '*') =>('' + cc).slice(0, -num).replace(/./g, mask) + ('' + cc).slice(-num);",
    "test": "mask(1234567890, 3); // '*******890'",
    "difficulty":"2"
  },
  {
    "id": "pad",
    "num": "101",
    "name": "",
    "descEn":"Pads a string on both sides with the specified character, if it's shorter than the specified length.",
    "descCn":"如果短于指定的长度，则在两边以指定的字符填充字符串。",
    "es5": "",
    "es6": "const pad = (str, length, char = ' ') =>str.padStart((str.length + length) / 2, char).padEnd(length, char);",
    "test": "pad(String(42), 6, '0'); // '004200'",
    "difficulty":"2"
  },
  {
    "id": "reverseString",
    "num": "102",
    "name": "",
    "descEn":"",
    "descCn":"",
    "es5": "",
    "es6": "const reverseString = str => [...str].reverse().join('');",
    "test": "",
    "difficulty":"1"
  },
  {
    "id": "sortCharactersInString",
    "num": "103",
    "name": "",
    "descEn":"Alphabetically sorts the characters in a string.",
    "descCn":"按字母顺序排列字符串中的字符。",
    "es5": "",
    "es6": "const sortCharactersInString = str => [...str].sort((a, b) => a.localeCompare(b)).join('');",
    "test": "sortCharactersInString('cabbage'); // 'aabbceg'",
    "difficulty":"1"
  },
  {
    "id": "stringPermutations",
    "num": "104",
    "name": "",
    "descEn":"This function's execution time increases exponentially with each character. Anything more than 8 to 10 characters will cause your browser to hang as it tries to solve all the different combinations.",
    "descCn":"",
    "es5": "",
    "es6": "",
    "test": "stringPermutations('abc'); // ['abc','acb','bac','bca','cab','cba']",
    "difficulty":"4"
  },
  {
    "id": "stripHTMLTags",
    "num": "103",
    "name": "",
    "descEn":"stripHTMLTags",
    "descCn":"",
    "es5": "",
    "es6": "const stripHTMLTags = str => str.replace(/<[^>]*>/g, '');",
    "test": "stripHTMLTags('<p><em>lorem</em> <strong>ipsum</strong></p>'); // 'lorem ipsum'",
    "difficulty":"1"
  },
  {
    "id": "toCamelCase",
    "num": "104",
    "name": "",
    "descEn":"Converts a string to camelcase.",
    "descCn":"将字符串转换为camelcase。",
    "es5": "",
    "es6": "",
    "test": "toCamelCase('some_database_field_name'); // 'someDatabaseFieldName'",
    "difficulty":"2"
  },
  {
    "id": "toKebabCase",
    "num": "105",
    "name": "",
    "descEn":"",
    "descCn":"",
    "es5": "",
    "es6": "",
    "test": "toKebabCase('camelCase'); // 'camel-case'",
    "difficulty":"2"
  },
  {
    "id": "URLJoin",
    "num": "106",
    "name": "",
    "descEn":"Joins all given URL segments together, then normalizes the resulting URL.",
    "descCn":"",
    "es5": "",
    "es6": "const URLJoin = (...args) =>args.join('/').replace(/[\/]+/g, '/').replace(/^(.+):\//, '$1://').replace(/^file:/, 'file:/').replace(/\/(\?|&|#[^!])/g, '$1').replace(/\?/g, '&').replace('&', '?');",
    "test": "URLJoin('http://www.google.com', 'a', '/b/cd', '?foo=123', '?bar=foo'); // 'http://www.google.com/a/b/cd?foo=123&bar=foo'",
    "difficulty":"2"
  },
  {
    "id": "words",
    "num": "107",
    "name": "",
    "descEn":"Converts a given string into an array of words.",
    "descCn":"将给定的字符串转换为单词数组。",
    "es5": "",
    "es6": "const words = (str, pattern = /[^a-zA-Z-]+/) => str.split(pattern).filter(Boolean);",
    "test": "words('I love javaScript!!'); // ["I", "love", "javaScript"]",
    "difficulty":"2"
  },
  {
    "id": "getType",
    "num": "108",
    "name": "",
    "descEn":"Returns the native type of a value.",
    "descCn":"",
    "es5": "",
    "es6": "const getType = v =>v === undefined ? 'undefined' : v === null ? 'null' : v.constructor.name.toLowerCase();",
    "test": "",
    "difficulty":"2"
  },
  {
    "id": "isArrayLike",
    "num": "109",
    "name": "",
    "descEn":"Checks if the provided argument is array-like (i.e. is iterable).",
    "descCn":"",
    "es5": "",
    "es6": "const isArrayLike = val => {try {return [...val], true;} catch (e) {return false;}};",
    "test": "",
    "difficulty":"2"
  },
  {
    "id": "isPromiseLike",
    "num": "110",
    "name": "",
    "descEn":"Returns true if an object looks like a Promise, false otherwise.",
    "descCn":"",
    "es5": "",
    "es6": "const isPromiseLike = obj =>obj !== null &&(typeof obj === 'object' || typeof obj === 'function') &&typeof obj.then === 'function';",
    "test": "",
    "difficulty":"2"
  }



]
